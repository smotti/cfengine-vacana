# Credits go to Neil H. Watson, because this is a modified version of his
# update.cf the comes with the EFL lib.

body common control
{
   bundlesequence => { "list_backup", "main" };
}

bundle common list_backup
{
  meta:
    "purpose" string => "Provide load balancing and redundancy";

  vars:
    "policy_servers"
      comment => "A list of policies server to contact during update",
      slist => { ${sys.policy_hub} };
}

bundle common update_c
{
  meta:
    "purpose" string => "Vars and classes for other bundles required during update process";

  vars:
    any::
      "masterfiles"
        comment => "Where to find the masterfiles on the policy hub",
        string  => "${sys.workdir}/masterfiles";
}

bundle agent build_manifest
{
  meta:
    "purpose" string => "Run cf-manifest to update manifest.txt";

  vars:
    "cmd"
      comment => "Command to execute to create the manifest",
      string  => "${sys.workdir}/modules/cf-manifest";

  commands:
    am_policy_hub::
      "${cmd}"
        comment => "Create new manifest.txt",
        handle  => "build_manifest_commands_cf_manifest",
        contain => in_shell_and_silent;
}

bundle agent config
{
  meta:
    "purpose" string => "User defined configs here.";

  vars:
    any::
      "modules_path"
        comment => "Where to find modules on the policy server.",
        string  => "${sys.workdir}/modules";

      "inputs_manifest"
        comment => "Manifest file to determine what inputs to download",
        string  => "manifest.txt";

      "cfengine_procs"
        comment => "CFEngine processes to start or restart",
        slist   => { "cf-serverd", "cf-execd", "cf-monitord" };

    policy_server|am_policy_hub::
      "modules"
        comment => "Modules required for a minimum working system.",
        slist   => { "cf-manifest" };
      
   classes:
      "daily_inputs_sync_with_purge"
         scope      => "namespace",
         expression => splayclass( "${sys.host}", "daily" );

   reports:
      report_policy_servers::
         "${list_backup.policy_servers}";
}

bundle agent main
{
   meta:
      "purpose" string => "Drives bundle order through method calls.";

   methods:
      "Load configs"
         handle    => "main_methods_config",
         usebundle => config;

      am_policy_hub::
        "Build new manifest.txt"
          comment   => "Build/Update the manifest.txt",
          handle    => "main_methods_build_manifest",
          usebundle => build_manifest;

      !daily_inputs_sync_with_purge::
         "Download manifest"
            handle     => "main_methods_download_manifest",
            depends_on => { "main_methods_config" },
            usebundle  => download_manifest ( "${config.inputs_manifest}" );

         "Update inputs and modules"
            handle     => "main_methods_inputs",
            depends_on => { "main_methods_config", "main_methods_download_manifest" },
            usebundle  => inputs_and_modules ( "${sys.workdir}/inputs/${config.inputs_manifest}" );

      daily_inputs_sync_with_purge::
         "Recurse inputs copy with purge"
            handle     => "main_methods_inputs_purge",
            depends_on => { "main_methods_config" },
            usebundle  => inputs_purge;

      any::
         "Start processes"
            handle     => "main_methods_start_procs",
            depends_on => { "main_methods_config" },
            usebundle  => start_procs;
}

bundle agent download_manifest( ref )
{
   meta:
      "purpose" string => "Download inputs manifest file";

   files:
      "${sys.workdir}/inputs/${ref}"
         handle    => "download_manifest_files_inputs_manifest",
         perms     => mog( "600", "root", "root" ),
         copy_from => secure_cp( 
            "${update_c.masterfiles}/${ref}",
            "@{list_backup.policy_servers}" 
            );
}

bundle agent inputs_purge
{
   meta:
      "purpose" string => "Do a full sync of inputs with purging on.";

   files:
      "${sys.workdir}/inputs/"
         handle       => "inputs_purge_files_inputs",
         perms        => mog( "600", "root", "root" ),
         classes      => if_repaired( "kill_cf_procs" ),
         depth_search => recurse( "inf" ),
         copy_from    => secure_sync( "${update_c.masterfiles}", "@{list_backup.policy_servers}" );

   processes:
      kill_cf_procs::
         "${config.cfengine_procs}"
            handle         => "inputs_purge_processes_kill",
            comment        => "Kill procs for later restart.",
            process_select => by_name( "(${sys.workdir}/bin/){0,1}${config.cfengine_procs}" ),
            signals        => { "term", "kill" };
}

bundle agent inputs_and_modules( ref )
{
   meta:
      "purpose" string => "Download inputs determined by manifest file.";

   vars:
      "comment"
        comment => "Comment string in manifest.txt",
        string  => "\s*#[^\n]*";

      "array_delimiter"
        comment => "Field delimiter for CSV data files read by data_readstringarrayidx",
        string  => "\s*;;\s*";

      "max_num"
        comment => "Maximum number of lines to read from data file",
        int     => "500";

      "max_bytes"
        comment => "Maximum number of bytes to read from data file",
        string  => "1M";

      "manifest"
         comment => "Read data file for parsing.",
         data    => data_readstringarrayidx(
            "${ref}",
            "${comment}",
            "${array_delimiter}",
            "${max_num}",
            "${max_bytes}"
         );

      "i"
         comment => "Get index json loaded above.",
         slist   => getindices( "manifest" );

      "manifest_file_canon[${i}]"
         comment => "Canonify for later use",
         string  => canonify( "${manifest[${i}][0]}" );

      "manifest_file[${i}]"
         comment => "Turn into reference for simpler reading.",
         string  => "manifest[${i}][0]";

      "manifest_md5sum[${i}]"
         comment => "Turn into reference for simpler reading.",
         string  => "manifest[${i}][1]";

   classes:
      "download_${manifest_file_canon[${i}]}"
         comment => "Set download class if file is missing.",
         not     => fileexists( "${sys.workdir}/inputs/${${manifest_file[${i}]}}" );

      "download_${manifest_file_canon[${i}]}"
         comment => "Set download class if file checksum does not match manifest.",
         not     => hashmatch( "${sys.workdir}/inputs/${${manifest_file[${i}]}}", "md5", "${${manifest_md5sum[${i}]}}" );

   files:
      "${sys.workdir}/inputs/${${manifest_file[${i}]}}"
         handle     => "inputs_and_modules_files_inputs_download",
         comment    => "Download file shown to be new by the mainfest",
         ifvarclass => "download_${manifest_file_canon[${i}]}",
         classes    => if_repaired( "kill_cf_procs" ),
         copy_from  => secure_cp( "${update_c.masterfiles}/${${manifest_file[${i}]}}", "@{list_backup.policy_servers}" );
      
      "${sys.workdir}/inputs/${${manifest_file[${i}]}}"
         handle     => "inputs_and_modules_files_inputs_permissions",
         comment    => "Promise file perms",
         perms      => mog( "600", "root", "root" );

# TODO were to put masterfiles module? sitefiles?
      "${sys.workdir}/modules/${config.modules}"
         handle     => "inputs_and_modules_files_modules_download",
         comment    => "Update modules",
         ifvarclass => "policy_server|am_policy_hub",
         perms      => mog( "700", "root", "root" ),
         copy_from  => secure_cp( "${config.modules_path}/${config.modules}", "@{list_backup.policy_servers}" );

   processes:
      kill_cf_procs::
         "${config.cfengine_procs}"
            handle         => "inputs_and_modules_processes_kill",
            comment        => "Kill procs for later restart.",
            process_select => by_name( "(${sys.workdir}/bin/){0,1}${config.cfengine_procs}" ),
            signals        => { "term", "kill" };
}

bundle agent start_procs
{
   meta:
      "purpose" string => "Start CFEngine processes";

   processes:
      "${config.cfengine_procs}"
         handle         => "start_procs_processes_start",
         comment        => "Kill procs for later restart.",
         process_select => by_name( "(${sys.workdir}/bin/){0,1}${config.cfengine_procs}" ),
         restart_class  => canonify( "restart_${config.cfengine_procs}" );

   commands:
      "${sys.workdir}/bin/${config.cfengine_procs}"
         handle     => "start_procs_commands_start",
         comment    => "Issue restart commmand",
         ifvarclass => canonify( "restart_${config.cfengine_procs}" );
}
   
body process_select by_name( command_regex )
{
   command        => "${command_regex}";
   process_result => "command";
}

body perms mog(mode,user,group)
{
   owners => { "$(user)" };
   groups => { "$(group)" };
   mode   => "$(mode)";
}

body copy_from secure_cp(from,server)
{
   source      => "$(from)";
   servers     => { "$(server)" };
   compare     => "digest";
   encrypt     => "true";
   verify      => "true";
}

body copy_from secure_sync(from,server)
{
   source      => "$(from)";
   servers     => { "$(server)" };
   compare     => "digest";
   purge       => "true";
   type_check  => "false";
   encrypt     => "true";
   verify      => "true";
}

body classes if_repaired(x)
{
   promise_repaired => { "$(x)" };
}

body depth_search recurse(d)
{
depth => "$(d)";
xdev  => "true";
}

body contain in_shell_and_silent
{
  useshell  => "true";
  no_output => "true";
}
