bundle common va_c
{
  meta:

    "purpose" string => "Common classes and variables for vacana lib.";
    "tags" slist     => { "vacana" };

  vars:
    
    "promise_log"
      comment => "File to log promises to without their outcome",
      string  => "/var/cfengine/vacana/promises.log";


    "outcome_log"
      comment => "File to log promises with their outcome, used by promises_outcome bundle",
      string  => "/var/cfengine/vacana/promises_outcome.log";

    "log_delim"
      comment => "Delimiter used in promise logs",
      string  => "\s*;;\s*";

    "max_num"
      comment => "Maximum number of lines to read from a file",
      int     => "300";

    "max_bytes"
      comment => "Maximum number of bytes to read from a file",
      string  => "2M";

    "inputs"
      comment => "Convenient variable to include the whole lib easily",
      slist => { 
	      "${this.promise_dirname}/promises_reports.cf",
	      "${this.promise_dirname}/files/file_copy_local.cf",
        "${this.promise_dirname}/files/file_copy_remote.cf",
	      "${this.promise_dirname}/files/file_remove.cf",
      };

    "test_inputs"
      comment => "Convenient variable to include testing bundles",
      slist   => {
	      "${this.promise_dirname}/files/tests/file_copy_local.cf",
      };
}

# TODO: Add bundle to create log files, if they don't exist, and if they do
#	remove them.

body action va_log_promise(handle, promiser, promisee)
# @brief  Log a string to va_c.promise_log with given params.
# @param  handle    Promise handle
# @param  promiser  Promiser of the promise
# @param  promisee  Who makes the promise
{
  log_kept     => "${va_c.promise_log}";
  log_repaired => "${va_c.promise_log}";
  log_failed   => "${va_c.promise_log}";
  log_string   => "${handle} ;; ${promiser} ;; ${promisee}";
}
